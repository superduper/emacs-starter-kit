#+TITLE: Haru.org
#+OPTIONS: H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:nil skip:nil d:t tags:not-in-toc
#+STARTUP: INDENT HIDESTARS

1. Установка любимых пакетов из *ELPA*. Работает только с одной
   активной локальной веткой репозитория.

    #+begin_src emacs-lisp :tangle yes
      (starter-kit-install-packages-from-elpa 
       '(
         ;; slime              ;; Superior Lisp Interaction Mode for Emacs
         ;; slime-repl         ;; Read-Eval-Print Loop written in Emacs Lisp
         htmlize            ;; Convert buffer text and decorations to HTML.
         ))
    #+end_src

2. *Сочетания клавиш.*

3. *M-Space* — переключение между языками. Две легко доступные,
    вплотную расположенные клавиши — это лучший вариант. Эта
    комбинация пересекается с вызовом «меню окна» в среде GNOME, но в
    гноме я отключил это сочетание за ненадобностью.

    #+begin_src emacs-lisp
    (global-set-key (kbd "M-SPC") 'toggle-input-method)
    #+end_src

4. *ERC* — Internet Relay Chat для Emacs.

   #+begin_src emacs-lisp
   (require 'erc)
   (require 'erc-autoaway)
   (require 'erc-fill)
   (require 'erc-join)
   (require 'erc-lang)
   (require 'erc-log)
   (require 'erc-menu)
   (require 'erc-services)
   
   (erc-autojoin-mode t)
   (erc-fill-mode t)
   (erc-nickserv-mode t)
   
   (custom-set-variables
    '(erc-nick           "zahardzhan")
    '(erc-email-userid   "zahardzhan@gmail.com")
    '(erc-user-full-name "Roman Zaharov")
    '(erc-nick-uniquifier "_")
   
    '(erc-autojoin-channels-alist '(("freenode.net" "#clojure")
                                    ("irc.int.ru"   "#unix")))
    '(erc-encoding-coding-alist   '(("#debian-russian" . cyrillic-koi8) 
                                    ("#altlinux"       . cyrillic-koi8) 
                                    ("#unix.ru"        . cyrillic-koi8) 
                                    ("#fidorus"        . cyrillic-koi8)))
   
    '(erc-prompt-for-password nil)
    '(erc-kill-queries-on-quit t)
    '(erc-server-coding-system '(koi8-r . koi8-r))
   
    '(erc-log-insert-log-on-open nil)
    '(erc-log-channels t)
    '(erc-log-channels-directory "~/.irclogs/")
    '(erc-save-buffer-on-part t)
    '(erc-hide-timestamps nil)
   
    '(erc-max-buffer-size 20000)
   
    '(erc-autoaway-idle-seconds 1200)
    '(erc-autoaway-message "I'm gone (autoaway after %i seconds)")
    '(erc-auto-discard-away t)
   
    '(erc-auto-query 'buffer)
   
    '(erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT"))
   
    '(erc-prompt-for-nickserv-password nil))
   
   (defun erc-connect ()
     (interactive)
     (progn
       (erc-select :server "irc.freenode.net" :port 6667 :nick "zahardzhan")))
   #+end_src

5. Моя цветовая тема «Dzhan».

   #+begin_src emacs-lisp
   (require 'color-theme)
   
   (setq dzhan-fore-color    "#b0b0b0"
         dzhan-back-color    "#303058"
         dzhan-orange-color  "#f09a71"
         dzhan-comment-color "#10a5b7")
   
   (defun color-theme-dzhan ()
     "Color theme by Roman Zaharov <zahardzhan@gmail.com>"
     (interactive)
     (color-theme-install
      `(color-theme-dzhan
        ((foreground-color . ,dzhan-fore-color)
         (background-color . ,dzhan-back-color)
         (mouse-color      . ,dzhan-fore-color)
         (cursor-color     . ,dzhan-fore-color)
         (border-color     . "#405088")
         (background-mode  . dark))
   
        ((help-highlight-face . underline)
         (list-matching-lines-face . bold)
         (widget-mouse-face . highlight))
   
        (default ((t (:height normal :width normal
                              :background ,dzhan-back-color
                              :foreground ,dzhan-fore-color
                              :inverse-video nil :box nil :strike-through nil
                              :overline nil :stipple nil :underline nil
                              :slant normal :weight normal))))
   
        (bold ((t (:bold t :weight bold))))
        (bold-italic ((t (:italic t :bold t :slant italic :weight bold))))
        (border ((t (:background "#25254d"))))
        (comint-highlight-input ((t (:bold t :weight bold))))
        (comint-highlight-prompt ((t (:foreground "cyan"))))
        (cursor ((t (:foreground "#303058" :background "#b0b0b0"))))
        
        (fixed-pitch ((t (:family "courier"))))
   
        (font-lock-builtin-face ((t (:foreground "#899cff"))))
        (font-lock-comment-face ((t (:foreground ,dzhan-comment-color))))
        (font-lock-constant-face ((t (:foreground "13c1d5"))))
        (font-lock-doc-face ((t (:foreground ,dzhan-comment-color))))
        (font-lock-doc-string-face ((t (:foreground ,dzhan-comment-color))))
        (font-lock-function-name-face ((t (:foreground "#8dbafc"))))
        (font-lock-keyword-face ((t (:foreground ,dzhan-orange-color))))
        (font-lock-preprocessor-face ((t (:foreground ,dzhan-orange-color))))
        (font-lock-reference-face ((t (:underline t))))
        (font-lock-string-face ((t (:foreground "#4aa5ff"))))
        (font-lock-type-face ((t (:foreground ,dzhan-orange-color))))
        (font-lock-variable-name-face ((t (:foreground "#44c573"))))
        (font-lock-warning-face ((t (:bold t :foreground "#d04d63" :weight bold))))
        
        (fringe ((t (:background "#222251" :foreground "#b0b0b0"))))
        (header-line ((t (:box (:line-width -1 :style released-button) :background "grey20" :foreground "grey90" :box nil))))
        (highlight ((t (:background "#222251"))))
        (horizontal-divider ((t (:background "gray16" :foreground "#00ff00"))))
        
        (ido-first-match ((t (:foreground ,dzhan-orange-color))))
        (ido-only-match ((t (:foreground ,dzhan-orange-color :bold t))))
        (ido-subdir ((t (:foreground ,dzhan-orange-color))))
        
        (isearch ((t (:box (:line-width -1) :foreground ,dzhan-orange-color :background ,dzhan-back-color :underline nil))))
        (isearch-fail ((t (:background ,dzhan-back-color :foreground ,dzhan-orange-color :weight bold :inverse-video t))))
        (isearch-lazy-highlight-face ((t  (:background ,dzhan-back-color :foreground ,dzhan-orange-color :underline t))))
        
        (italic ((t (:italic t :slant italic))))
        (menu ((t (:background "gray16" :foreground "green"))))
        
        (modeline ((t (:background "grey75" :foreground "grey15" :box (:line-width -1 :style flat)))))
        (modeline-highlight ((t (:bold t))))
        (mode-line-inactive ((t (:background "grey60" :foreground "grey15" :box (:line-width -1 :style flat)))))
        
        (minibuffer-prompt ((t (:foreground ,dzhan-orange-color))))
        
        (mouse ((t (:background "yellow"))))
        (primary-selection ((t (:background "#4a4a67"))))
        (region ((t (:background "#444478"))))
        (scroll-bar ((t (:background "gray16" :foreground "#00ff00"))))
        (secondary-selection ((t (:background "#00ff00" :foreground "black"))))
   
        (show-paren-match    ((t (:foreground ,dzhan-orange-color :weight bold))))
        (show-paren-mismatch ((t (:foreground ,dzhan-orange-color :weight bold :inverse-video t
                                              :box (:line-width -1)))))
   
        ;;  (slime-error-face ((t (:background "indian red" :foreground "green" :bold t))))
        ;;  (slime-warning-face ((t (:background "indian red" :foreground "green"))))
        ;;  (slime-style-warning-face ((t (:background "indian red" :foreground "green"))))
        ;;  (slime-note-face ((t (:background "indian red" :foreground "green"))))
        ;;  (slime-highlight-face ((t (:background "indian red" :foreground "green"))))
   
        ;;  (sldb-catch-tag-face ((t (:foreground "khaki")))) ;%
        ;;  (sldb-condition-face ((t (:foreground "light sea green"))))
        ;;  (sldb-detailed-frame-line-face ((t ())))
        ;;  (sldb-frame-label-face ((t (:foreground "dark orchid"))))
        ;;  (sldb-frame-line-face ((t ())))
        ;;  (sldb-local-name-face ((t (:foreground "IndianRed1"))))
        ;;  (sldb-local-value-face ((t (:foreground "lemon chiffon"))))
        ;;  (sldb-reference-face ((t (:background "cyan"))))
        ;;  (sldb-restart-type-face ((t (:foreground "medium orchid"))))
        ;;  (sldb-restart-face ((t (:foreground "pale violet red"))))
        ;;  (sldb-restart-number-face ((t (:foreground "dark orchid"))))
        ;;  (sldb-section-face ((t (:foreground "sandy brown"))))
        ;;  (sldb-topline-face ((t (:foreground "IndianRed1"))))
   
        ;;  (slime-repl-prompt-face ((t (:foreground "pale violet red"))))
        ;;  (slime-repl-output-face ((t (:foreground "dark orchid"))))
        ;;  (slime-repl-input-face ((t (:foreground "pale violet red"))))
        ;;  (slime-repl-result-face ((t (:foreground "medium orchid"))))
   
        ;;  (slime-inspector-topline-face ((t (:background "gray30" :foreground "green"))))
        ;;  (slime-inspector-label-face ((t (:foreground "indian red")))) ;%
        ;;  (slime-inspector-value-face ((t (:foreground "light pink"))))
        ;;  (slime-inspector-action-face ((t (:background "cyan"))))
        ;;  (slime-inspector-type-face ((t (:foreground "light sea green")))) ;%
   
        ;;  (slime-reader-conditional-face ((t ,billc-insignificant-face)))
        (slime-repl-inputed-output-face ((((class color) (background dark)) (:foreground "#4aa5ff"))))
   
        (font-latex-verbatim-face ((t (:foreground ,dzhan-comment-color))))
   
        (speedbar-button-face ((t (:foreground "#00ff00"))))
        (speedbar-directory-face ((t (:foreground ,dzhan-orange-color))))
        (speedbar-file-face ((t (:foreground ,dzhan-fore-color))))
        (speedbar-highlight-face ((t (:background "#4a4a67" :foreground "#eeeeee"))))
        (speedbar-selected-face ((t (:foreground ,dzhan-orange-color :underline t))))
        (speedbar-tag-face ((t (:foreground "yellow"))))
        (tool-bar ((t (:background "gray16" :foreground "green" :box (:line-width 1 :style released-button)))))
        (tooltip ((t (:background "#303058" :foreground "#13c1d5"))))
        (trailing-whitespace ((t (:background "red"))))
        ;;(underline ((t (:underline t))))
        (variable-pitch ((t (:family "helv"))))
        (vertical-divider ((t (:background "gray16" :foreground "#00ff00"))))
        (widget-button-face ((t (:bold t :weight bold))))
        (widget-button-pressed-face ((t (:foreground "red"))))
        (widget-documentation-face ((t (:foreground "lime green"))))
        (widget-field-face ((t (:background "dim gray"))))
        (widget-inactive-face ((t (:foreground "light gray"))))
        (widget-single-line-field-face ((t (:background "dim gray"))))
        (zmacs-region ((t (:background "steelblue" :foreground "white")))))))
   
   (provide 'color-theme-dzhan)
   #+end_src

6. *Info-mode.* В директории =info= хранятся документы в
   соответствующем формате.
   
   #+begin_src emacs-lisp
   (require 'info)
   
   (add-to-list 'Info-directory-list (concat dotfiles-dir "/info"))
   #+end_src

7. *Org-mode.* Проект «Bullshit mode on» — мой блог.
   
   #+begin_src emacs-lisp
   (setq org-publish-project-alist
         '(("zahardzhan.github.com-org"
            :base-directory "~/Dropbox/Blog/org/"
            :base-extension "org"
            :publishing-directory "~/Dropbox/Blog/_posts/"
            :recursive t
            :publishing-function org-publish-org-to-html
            :headline-levels 4
            :html-extension "html"
            :body-only t)
   
           ("zahardzhan.github.com-static"
            :base-directory "~/Dropbox/Blog/org/"
            :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php"
            :publishing-directory "~/Dropbox/Blog/_posts/"
            :recursive t
            :publishing-function org-publish-attachment)
           
           ("zahardzhan.github.com"
            :components ("zahardzhan.github.com-org"
                         "zahardzhan.github.com-static"))))
   #+end_src

8. Поддержка интерактивного литературного программирования в Babel —
   запуск блоков кода в документе в соответствующих сессиях языков
   программирования. Для каждого указанного здесь языка должны быть
   установлены необходимые ему пакеты и режимы Emacs. Подробнее на
   [[http://orgmode.org/worg/org-contrib/babel/languages.php][офсайте]].

   #+begin_src emacs-lisp
   (org-babel-do-load-languages
     'org-babel-load-languages
     '((R . t)
       (emacs-lisp . t)
       (clojure . t)
       (python . t)))
   #+end_src

9. *Typopunct-mode.* Если не вдаваться в подробности профессиональной
   типографики, то для получения сносного текста достаточно уметь
   применять всего 6 символов. О /правилах применения/ хорошо
   рассказал Лебедев в своем «Ководстве»: [[http://www.artlebedev.ru/kovodstvo/sections/62/][§ 62. Экранная типографика]],
   [[http://www.artlebedev.ru/kovodstvo/sections/97/][§ 97. Тире, минус и дефис]], [[http://www.artlebedev.ru/kovodstvo/sections/104/][§ 104. Кавычки]], [[http://www.artlebedev.ru/kovodstvo/sections/158/][§ 158. Короткое тире]].

   Подробнее о [[http://zahardzhan.github.com/2010/russian-typography-in-emacs.html][типографике в Emacs]].

   Далее идут настройки пакета [[file:src/typopunct.el][typopunct]].

10. Загружаем /typopunct.el/ и выбираем русскую типографику:

    #+begin_src emacs-lisp
    (require 'typopunct)
    (setq-default typopunct-buffer-language 'russian)
    #+end_src

11. Функция включает /typopunct-mode/.

    #+begin_src emacs-lisp
    (defun turn-on-typopunct-mode ()
      (typopunct-mode t))
    #+end_src

12. Здесь я включаю типографику в режимах /org-mode/ и
    /markdown-mode/. Чтобы включить типографику в других режимах —
    добавте функцию =turn-on-typopunct-mode= в соответствующие ловушки
    или воспользуйтесь командой =M-x typopunct-mode=.

    #+begin_src emacs-lisp
    (add-hook 'markdown-mode-hook 'turn-on-typopunct-mode)
    (add-hook 'org-mode-hook 'turn-on-typopunct-mode)
    #+end_src

13. Пакет *htmlize* служит для экспортирования текста буферов и файлов
    в подсвеченый текущей цветовой темой HTML. Пакет поддерживает 3
    варианта экспорта в HTML, для выбора конкретного варианта нужно
    установить значение переменной =htmlize-output-type= в

    - =\'css= — вариант по-умолчанию, в нем htmlize для установки
      цветов подсветки использует /тег/ =style= в заголовке
      HTML-документа. В итоге получается цельный документ.
      
    - =\'inline-css= — цвета устанавливаются в /параметре/ =style=
      каждого тага, таким образом блоки экспортируемого документа
      можно вставлять в другие документы.

    - =\'font= — как =\'inline-css=, но используется /нестандартный/
      параметр тегов =font=; для совместимости с древними браузерами.

    #+begin_src emacs-lisp
    (setq htmlize-output-type 'inline-css)
    #+end_src

14. Функция =swap-meta-super= меняет местами клавиши Meta и Super.

    #+begin_src emacs-lisp
    (defun swap-meta-super ()
      (setq x-meta-keysym 'super)
      (setq x-super-keysym 'meta))
    #+end_src
